// Date: 19.10.2014 21:49:23
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package com.ragingart.maatsmod.client.renderer.model;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;

public class ModelSharpeningWheel extends ModelBase {
    //Static
    ModelRenderer Base;
    ModelRenderer Sockel;
    ModelRenderer Stütze1;
    ModelRenderer Stütze2Sockel;
    ModelRenderer Stütze1Sockel;
    ModelRenderer Stütze2;
    ModelRenderer Quertrager;

    // Rot
    ModelRenderer WelleRot;
    ModelRenderer FlunschRot;
    ModelRenderer Wheel0Rot;

    public ModelSharpeningWheel() {
        textureWidth = 128;
        textureHeight = 64;
        // Base
        Base = new ModelRenderer(this, 0, 28);
        Base.addBox(-16F, -2F, -16F, 32, 4, 32);
        Base.setRotationPoint(0F, 0F, 0F);
        Base.setTextureSize(128, 64);
        Base.mirror = true;
        setRotation(Base, 0F, 0F, 0F);
        Sockel = new ModelRenderer(this, 84, 0);
        Sockel.addBox(-6F, -1F, -5F, 12, 2, 10);
        Sockel.setRotationPoint(0F, -3F, 0F);
        Sockel.setTextureSize(128, 64);
        Sockel.mirror = true;
        setRotation(Sockel, 0F, 0F, 0F);
        // Stützen
        Stütze1 = new ModelRenderer(this, 68, 0);
        Stütze1.addBox(-2F, -10F, -1F, 4, 20, 2);
        Stütze1.setRotationPoint(0F, -16F, 14F);
        Stütze1.setTextureSize(128, 64);
        Stütze1.mirror = true;
        setRotation(Stütze1, 0F, 0F, 0F);
        Stütze2 = new ModelRenderer(this, 68, 0);
        Stütze2.addBox(-2F, -10F, -1F, 4, 20, 2);
        Stütze2.setRotationPoint(0F, -16F, -14F);
        Stütze2.setTextureSize(128, 64);
        Stütze2.mirror = true;
        setRotation(Stütze2, 0F, 0F, 0F);
        Stütze1Sockel = new ModelRenderer(this, 92, 12);
        Stütze1Sockel.addBox(-7F, -2F, -2F, 14, 4, 4);
        Stütze1Sockel.setRotationPoint(0F, -4F, 14F);
        Stütze1Sockel.setTextureSize(128, 64);
        Stütze1Sockel.mirror = true;
        setRotation(Stütze1Sockel, 0F, 0F, 0F);
        Stütze2Sockel = new ModelRenderer(this, 92, 12);
        Stütze2Sockel.addBox(-7F, -2F, -2F, 14, 4, 4);
        Stütze2Sockel.setRotationPoint(0F, -4F, -14F);
        Stütze2Sockel.setTextureSize(128, 64);
        Stütze2Sockel.mirror = true;
        setRotation(Stütze2Sockel, 0F, 0F, 0F);
        // QT
        Quertrager = new ModelRenderer(this, 33, 28);
        Quertrager.addBox(-2.5F, -0.5F, -16F, 5, 4, 32);
        Quertrager.setRotationPoint(0F, -26F, 0F);
        Quertrager.setTextureSize(128, 64);
        Quertrager.mirror = true;
        setRotation(Quertrager, 0F, 0F, 0F);


        WelleRot = new ModelRenderer(this, 80, 0);
        WelleRot.addBox(-0.5F, -13F, -0.5F, 1, 26, 1);
        WelleRot.setRotationPoint(0F, -17F, 0F);
        WelleRot.setTextureSize(128, 64);
        WelleRot.mirror = true;
        setRotation(WelleRot, 0F, 0F, 0F);
        FlunschRot = new ModelRenderer(this, 88, 12);
        FlunschRot.addBox(0.5F, -2F, -0.5F, 1, 4, 1);
        FlunschRot.setRotationPoint(0F, -30F, 0F);
        FlunschRot.setTextureSize(128, 64);
        FlunschRot.mirror = true;
        setRotation(FlunschRot, 0F, 0F, 0F);
        Wheel0Rot = new ModelRenderer(this, 0, 0);
        Wheel0Rot.addBox(0.5F, -7F, -2.5F, 8, 14,5);
        Wheel0Rot.setRotationPoint(0F, -12F, 0F);
        Wheel0Rot.setTextureSize(128, 64);
        Wheel0Rot.mirror = true;
        setRotation(Wheel0Rot, 0F, 0F, 0F);
    }

    public void render(int animProgress, float f) {
        float anim = (float)Math.PI/50.0F*animProgress;

        Base.render(f);
        Sockel.render(f);
        Stütze1.render(f);
        Stütze2Sockel.render(f);
        Stütze1Sockel.render(f);
        Stütze2.render(f);
        Quertrager.render(f);

        renderRotatorPart(WelleRot,f,anim,1);
        renderRotatorPart(FlunschRot,f,anim,8);
        renderRotatorPart(Wheel0Rot,f,anim,16);
    }

    private void setRotation(ModelRenderer model, float x, float y, float z) {
        model.rotateAngleX = x;
        model.rotateAngleY = y;
        model.rotateAngleZ = z;
    }


    private void renderRotatorPart(ModelRenderer model, float f, float anim, int count) {
        float segment = 2*(float) Math.PI/count;
        for (int i = 0; i < count; i++) {
            model.rotateAngleY = segment * i + anim;
            model.render(f);
        }

    }

}
