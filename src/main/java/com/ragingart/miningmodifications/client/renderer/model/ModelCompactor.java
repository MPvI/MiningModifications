// Date: 19.10.2014 03:06:19
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package com.ragingart.miningmodifications.client.renderer.model;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;

public class ModelCompactor extends ModelBase {
    //Static Group
    ModelRenderer Boden;
    ModelRenderer Decke;
    ModelRenderer Stuetze1;
    ModelRenderer Stuetze2;
    ModelRenderer Stuetze3;
    ModelRenderer Stuetze4;
    ModelRenderer Balken1;
    ModelRenderer Balken2;
    ModelRenderer Balken3;
    ModelRenderer Balken4;
    //Rotator Group
    ModelRenderer Welle;
    ModelRenderer Walze;
    ModelRenderer WalzeAd1;
    ModelRenderer Zahnrad;
    ModelRenderer ZahnradAd1;

    public ModelCompactor() {
        textureWidth = 256;
        textureHeight = 128;
        initStaticGroup();
        initRotatorGroup();
    }

    public void render(int animProgress,float f) {
        float anim = (float)Math.PI/50.0F*animProgress;
        renderStaticGroup(f);
        adjustRotatorGroup(-4.0F, 0.0F);
        renderRotatorGroup(f,-anim);

        adjustRotatorGroup(4.0F,5.0F);
        renderRotatorGroup(f,anim);

        adjustRotatorGroup(4.0F,-5.0F);
        renderRotatorGroup(f,anim);
    }

    private void setRotation(ModelRenderer model, float x, float y, float z) {
        model.rotateAngleX = x;
        model.rotateAngleY = y;
        model.rotateAngleZ = z;
    }

    private void initStaticGroup() {
        Boden = new ModelRenderer(this, 0, 0);
        Boden.addBox(-16F, -4F, -16F, 32, 4, 32);
        Boden.setRotationPoint(0F, 16F, 0F);
        Boden.setTextureSize(256, 128);
        Boden.mirror = true;
        setRotation(Boden, 0F, 0F, 0F);
        Decke = new ModelRenderer(this, 0, 36);
        Decke.addBox(-16F, 0F, -8F, 32, 4, 16);
        Decke.setRotationPoint(0F, -16F, 0F);
        Decke.setTextureSize(256, 128);
        Decke.mirror = true;
        setRotation(Decke, 0F, 0F, 0F);
        Stuetze1 = new ModelRenderer(this, 128, 0);
        Stuetze1.addBox(-2F, 0F, -2F, 4, 27, 4);
        Stuetze1.setRotationPoint(13.9F, 12.8F, 13.9F);
        Stuetze1.setTextureSize(256, 128);
        Stuetze1.mirror = true;
        setRotation(Stuetze1, -2.83616F, 0F, 0F);
        Stuetze2 = new ModelRenderer(this, 128, 0);
        Stuetze2.addBox(-2F, 0F, -2F, 4, 27, 4);
        Stuetze2.setRotationPoint(-13.9F, 12.8F, 13.9F);
        Stuetze2.setTextureSize(256, 128);
        Stuetze2.mirror = true;
        setRotation(Stuetze2, -2.83616F, 0F, 0F);
        Stuetze3 = new ModelRenderer(this, 128, 0);
        Stuetze3.addBox(-2F, 0F, -2F, 4, 27, 4);
        Stuetze3.setRotationPoint(13.9F, 12.8F, -13.9F);
        Stuetze3.setTextureSize(256, 128);
        Stuetze3.mirror = true;
        setRotation(Stuetze3, 2.83616F, 0F, 0F);
        Stuetze4 = new ModelRenderer(this, 128, 0);
        Stuetze4.addBox(-2F, 0F, -2F, 4, 27, 4);
        Stuetze4.setRotationPoint(-13.9F, 12.8F, -13.9F);
        Stuetze4.setTextureSize(256, 128);
        Stuetze4.mirror = true;
        setRotation(Stuetze4, 2.83616F, 0F, 0F);
        Balken1 = new ModelRenderer(this, 144, 30);
        Balken1.addBox(-1F, -2F, -10F, 2, 4, 20);
        Balken1.setRotationPoint(14F, 4F, 0F);
        Balken1.setTextureSize(256, 128);
        Balken1.mirror = true;
        setRotation(Balken1, 0F, 0F, 0F);
        Balken2 = new ModelRenderer(this, 144, 30);
        Balken2.addBox(-1F, -2F, -10F, 2, 4, 20);
        Balken2.setRotationPoint(-14F, 4F, 0F);
        Balken2.setTextureSize(256, 128);
        Balken2.mirror = true;
        setRotation(Balken2, 0F, 0F, 0F);
        Balken3 = new ModelRenderer(this, 200, 30);
        Balken3.addBox(-1F, -2F, -8F, 2, 4, 16);
        Balken3.setRotationPoint(14F, -4F, 0F);
        Balken3.setTextureSize(256, 128);
        Balken3.mirror = true;
        setRotation(Balken3, 0F, 0F, 0F);
        Balken4 = new ModelRenderer(this, 200, 30);
        Balken4.addBox(-1F, -2F, -8F, 2, 4, 16);
        Balken4.setRotationPoint(-14F, -4F, 0F);
        Balken4.setTextureSize(256, 128);
        Balken4.mirror = true;
        setRotation(Balken4, 0F, 0F, 0F);
    }

    private void initRotatorGroup() {
        Welle = new ModelRenderer(this, 0, 64);
        Welle.addBox(-16F, -0.5F, -0.5F, 32, 1, 1);
        Welle.setTextureSize(256, 128);
        Welle.mirror = true;
        setRotation(Welle, 0F, 0F, 0F);

        Walze = new ModelRenderer(this, 145, 0);
        Walze.addBox(-12F, -3F, -3F, 24, 6, 6);
        Walze.setTextureSize(256, 128);
        Walze.mirror = true;
        setRotation(Walze, 0F, 0F, 0F);

        WalzeAd1 = new ModelRenderer(this, 145, 14);
        WalzeAd1.addBox(-12F, 3F, -2F, 24, 1, 4);
        WalzeAd1.setTextureSize(256, 128);
        WalzeAd1.mirror = true;
        setRotation(WalzeAd1, 0F, 0F, 0F);

        Zahnrad = new ModelRenderer(this,0,0);
        Zahnrad.addBox(0F, -3.5F, -3.5F, 1, 7, 7);
        Zahnrad.setTextureSize(256, 128);
        Zahnrad.mirror = true;
        setRotation(Zahnrad, 0F, 0F, 0F);
        ZahnradAd1 = new ModelRenderer(this,0,20);
        ZahnradAd1.addBox(0F, 3.5F, -2.5F, 1, 1, 5);
        ZahnradAd1.setTextureSize(256, 128);
        ZahnradAd1.mirror = true;
        setRotation(ZahnradAd1, 0F, 0F, 0F);
    }

    private void renderStaticGroup(float f) {
        Boden.render(f);
        Decke.render(f);
        Stuetze1.render(f);
        Stuetze2.render(f);
        Stuetze3.render(f);
        Stuetze4.render(f);
        Balken1.render(f);
        Balken2.render(f);
        Balken3.render(f);
        Balken4.render(f);
    }

    private void renderRotatorGroup(float f,float anim) {
        Welle.rotateAngleX=anim;
        Welle.render(f);
        Walze.rotateAngleX=anim;
        Walze.render(f);
        renderRotatorPart(WalzeAd1,f,anim);
        Zahnrad.rotateAngleX=anim;
        Zahnrad.render(f);
        renderRotatorPart(ZahnradAd1,f,anim);
    }

    private void adjustRotatorGroup(float y, float z){
        Welle.setRotationPoint(0F, y, z);
        Walze.setRotationPoint(0F, y, z);
        WalzeAd1.setRotationPoint(0F, y, z);
        Zahnrad.setRotationPoint(16F, y, z);
        ZahnradAd1.setRotationPoint(16F, y, z);
    }

    private void renderRotatorPart(ModelRenderer model,float f,float anim){
        float quarterCake = 90.0F/180.0F*(float)Math.PI;
        for (int i = 0; i < 4; i++) {
            model.rotateAngleX=quarterCake*i+anim;
            model.render(f);
        }

    }

}
